0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install' ]
2 info using npm@1.3.5
3 info using node@v0.10.15
4 verbose readDependencies using package.json deps
5 verbose install where, deps [ '/Users/witchfinderx/Sites/scalable-maintainable-js-training/1',
5 verbose install   [ 'grunt-contrib-jshint',
5 verbose install     'grunt-contrib-qunit',
5 verbose install     'grunt-contrib-concat',
5 verbose install     'grunt-contrib-uglify',
5 verbose install     'grunt-contrib-watch',
5 verbose install     'grunt-contrib-clean',
5 verbose install     'grunt-contrib-connect',
5 verbose install     'time-grunt' ] ]
6 info preinstall plugin@
7 verbose readDependencies using package.json deps
8 verbose cache add [ 'grunt-contrib-jshint@~0.1.1', null ]
9 verbose cache add name=undefined spec="grunt-contrib-jshint@~0.1.1" args=["grunt-contrib-jshint@~0.1.1",null]
10 verbose parsed url { protocol: null,
10 verbose parsed url   slashes: null,
10 verbose parsed url   auth: null,
10 verbose parsed url   host: null,
10 verbose parsed url   port: null,
10 verbose parsed url   hostname: null,
10 verbose parsed url   hash: null,
10 verbose parsed url   search: null,
10 verbose parsed url   query: null,
10 verbose parsed url   pathname: 'grunt-contrib-jshint@~0.1.1',
10 verbose parsed url   path: 'grunt-contrib-jshint@~0.1.1',
10 verbose parsed url   href: 'grunt-contrib-jshint@~0.1.1' }
11 verbose cache add name="grunt-contrib-jshint" spec="~0.1.1" args=["grunt-contrib-jshint","~0.1.1"]
12 verbose parsed url { protocol: null,
12 verbose parsed url   slashes: null,
12 verbose parsed url   auth: null,
12 verbose parsed url   host: null,
12 verbose parsed url   port: null,
12 verbose parsed url   hostname: null,
12 verbose parsed url   hash: null,
12 verbose parsed url   search: null,
12 verbose parsed url   query: null,
12 verbose parsed url   pathname: '~0.1.1',
12 verbose parsed url   path: '~0.1.1',
12 verbose parsed url   href: '~0.1.1' }
13 verbose addNamed [ 'grunt-contrib-jshint', '~0.1.1' ]
14 verbose addNamed [ null, '>=0.1.1-0 <0.2.0-0' ]
15 verbose cache add [ 'grunt-contrib-qunit@~0.1.1', null ]
16 verbose cache add name=undefined spec="grunt-contrib-qunit@~0.1.1" args=["grunt-contrib-qunit@~0.1.1",null]
17 verbose parsed url { protocol: null,
17 verbose parsed url   slashes: null,
17 verbose parsed url   auth: null,
17 verbose parsed url   host: null,
17 verbose parsed url   port: null,
17 verbose parsed url   hostname: null,
17 verbose parsed url   hash: null,
17 verbose parsed url   search: null,
17 verbose parsed url   query: null,
17 verbose parsed url   pathname: 'grunt-contrib-qunit@~0.1.1',
17 verbose parsed url   path: 'grunt-contrib-qunit@~0.1.1',
17 verbose parsed url   href: 'grunt-contrib-qunit@~0.1.1' }
18 verbose cache add name="grunt-contrib-qunit" spec="~0.1.1" args=["grunt-contrib-qunit","~0.1.1"]
19 verbose parsed url { protocol: null,
19 verbose parsed url   slashes: null,
19 verbose parsed url   auth: null,
19 verbose parsed url   host: null,
19 verbose parsed url   port: null,
19 verbose parsed url   hostname: null,
19 verbose parsed url   hash: null,
19 verbose parsed url   search: null,
19 verbose parsed url   query: null,
19 verbose parsed url   pathname: '~0.1.1',
19 verbose parsed url   path: '~0.1.1',
19 verbose parsed url   href: '~0.1.1' }
20 verbose addNamed [ 'grunt-contrib-qunit', '~0.1.1' ]
21 verbose addNamed [ null, '>=0.1.1-0 <0.2.0-0' ]
22 verbose cache add [ 'grunt-contrib-watch@~0.2.0', null ]
23 verbose cache add name=undefined spec="grunt-contrib-watch@~0.2.0" args=["grunt-contrib-watch@~0.2.0",null]
24 verbose parsed url { protocol: null,
24 verbose parsed url   slashes: null,
24 verbose parsed url   auth: null,
24 verbose parsed url   host: null,
24 verbose parsed url   port: null,
24 verbose parsed url   hostname: null,
24 verbose parsed url   hash: null,
24 verbose parsed url   search: null,
24 verbose parsed url   query: null,
24 verbose parsed url   pathname: 'grunt-contrib-watch@~0.2.0',
24 verbose parsed url   path: 'grunt-contrib-watch@~0.2.0',
24 verbose parsed url   href: 'grunt-contrib-watch@~0.2.0' }
25 verbose cache add name="grunt-contrib-watch" spec="~0.2.0" args=["grunt-contrib-watch","~0.2.0"]
26 verbose parsed url { protocol: null,
26 verbose parsed url   slashes: null,
26 verbose parsed url   auth: null,
26 verbose parsed url   host: null,
26 verbose parsed url   port: null,
26 verbose parsed url   hostname: null,
26 verbose parsed url   hash: null,
26 verbose parsed url   search: null,
26 verbose parsed url   query: null,
26 verbose parsed url   pathname: '~0.2.0',
26 verbose parsed url   path: '~0.2.0',
26 verbose parsed url   href: '~0.2.0' }
27 verbose addNamed [ 'grunt-contrib-watch', '~0.2.0' ]
28 verbose addNamed [ null, '>=0.2.0-0 <0.3.0-0' ]
29 verbose cache add [ 'grunt-contrib-concat@~0.1.2', null ]
30 verbose cache add name=undefined spec="grunt-contrib-concat@~0.1.2" args=["grunt-contrib-concat@~0.1.2",null]
31 verbose parsed url { protocol: null,
31 verbose parsed url   slashes: null,
31 verbose parsed url   auth: null,
31 verbose parsed url   host: null,
31 verbose parsed url   port: null,
31 verbose parsed url   hostname: null,
31 verbose parsed url   hash: null,
31 verbose parsed url   search: null,
31 verbose parsed url   query: null,
31 verbose parsed url   pathname: 'grunt-contrib-concat@~0.1.2',
31 verbose parsed url   path: 'grunt-contrib-concat@~0.1.2',
31 verbose parsed url   href: 'grunt-contrib-concat@~0.1.2' }
32 verbose cache add name="grunt-contrib-concat" spec="~0.1.2" args=["grunt-contrib-concat","~0.1.2"]
33 verbose parsed url { protocol: null,
33 verbose parsed url   slashes: null,
33 verbose parsed url   auth: null,
33 verbose parsed url   host: null,
33 verbose parsed url   port: null,
33 verbose parsed url   hostname: null,
33 verbose parsed url   hash: null,
33 verbose parsed url   search: null,
33 verbose parsed url   query: null,
33 verbose parsed url   pathname: '~0.1.2',
33 verbose parsed url   path: '~0.1.2',
33 verbose parsed url   href: '~0.1.2' }
34 verbose addNamed [ 'grunt-contrib-concat', '~0.1.2' ]
35 verbose addNamed [ null, '>=0.1.2-0 <0.2.0-0' ]
36 verbose cache add [ 'grunt-contrib-uglify@~0.1.1', null ]
37 verbose cache add name=undefined spec="grunt-contrib-uglify@~0.1.1" args=["grunt-contrib-uglify@~0.1.1",null]
38 verbose parsed url { protocol: null,
38 verbose parsed url   slashes: null,
38 verbose parsed url   auth: null,
38 verbose parsed url   host: null,
38 verbose parsed url   port: null,
38 verbose parsed url   hostname: null,
38 verbose parsed url   hash: null,
38 verbose parsed url   search: null,
38 verbose parsed url   query: null,
38 verbose parsed url   pathname: 'grunt-contrib-uglify@~0.1.1',
38 verbose parsed url   path: 'grunt-contrib-uglify@~0.1.1',
38 verbose parsed url   href: 'grunt-contrib-uglify@~0.1.1' }
39 verbose cache add name="grunt-contrib-uglify" spec="~0.1.1" args=["grunt-contrib-uglify","~0.1.1"]
40 verbose parsed url { protocol: null,
40 verbose parsed url   slashes: null,
40 verbose parsed url   auth: null,
40 verbose parsed url   host: null,
40 verbose parsed url   port: null,
40 verbose parsed url   hostname: null,
40 verbose parsed url   hash: null,
40 verbose parsed url   search: null,
40 verbose parsed url   query: null,
40 verbose parsed url   pathname: '~0.1.1',
40 verbose parsed url   path: '~0.1.1',
40 verbose parsed url   href: '~0.1.1' }
41 verbose addNamed [ 'grunt-contrib-uglify', '~0.1.1' ]
42 verbose addNamed [ null, '>=0.1.1-0 <0.2.0-0' ]
43 verbose cache add [ 'grunt-contrib-clean@~0.4.0', null ]
44 verbose cache add name=undefined spec="grunt-contrib-clean@~0.4.0" args=["grunt-contrib-clean@~0.4.0",null]
45 verbose parsed url { protocol: null,
45 verbose parsed url   slashes: null,
45 verbose parsed url   auth: null,
45 verbose parsed url   host: null,
45 verbose parsed url   port: null,
45 verbose parsed url   hostname: null,
45 verbose parsed url   hash: null,
45 verbose parsed url   search: null,
45 verbose parsed url   query: null,
45 verbose parsed url   pathname: 'grunt-contrib-clean@~0.4.0',
45 verbose parsed url   path: 'grunt-contrib-clean@~0.4.0',
45 verbose parsed url   href: 'grunt-contrib-clean@~0.4.0' }
46 verbose cache add name="grunt-contrib-clean" spec="~0.4.0" args=["grunt-contrib-clean","~0.4.0"]
47 verbose parsed url { protocol: null,
47 verbose parsed url   slashes: null,
47 verbose parsed url   auth: null,
47 verbose parsed url   host: null,
47 verbose parsed url   port: null,
47 verbose parsed url   hostname: null,
47 verbose parsed url   hash: null,
47 verbose parsed url   search: null,
47 verbose parsed url   query: null,
47 verbose parsed url   pathname: '~0.4.0',
47 verbose parsed url   path: '~0.4.0',
47 verbose parsed url   href: '~0.4.0' }
48 verbose addNamed [ 'grunt-contrib-clean', '~0.4.0' ]
49 verbose addNamed [ null, '>=0.4.0-0 <0.5.0-0' ]
50 verbose cache add [ 'grunt-contrib-connect@~0.3.0', null ]
51 verbose cache add name=undefined spec="grunt-contrib-connect@~0.3.0" args=["grunt-contrib-connect@~0.3.0",null]
52 verbose parsed url { protocol: null,
52 verbose parsed url   slashes: null,
52 verbose parsed url   auth: null,
52 verbose parsed url   host: null,
52 verbose parsed url   port: null,
52 verbose parsed url   hostname: null,
52 verbose parsed url   hash: null,
52 verbose parsed url   search: null,
52 verbose parsed url   query: null,
52 verbose parsed url   pathname: 'grunt-contrib-connect@~0.3.0',
52 verbose parsed url   path: 'grunt-contrib-connect@~0.3.0',
52 verbose parsed url   href: 'grunt-contrib-connect@~0.3.0' }
53 verbose cache add name="grunt-contrib-connect" spec="~0.3.0" args=["grunt-contrib-connect","~0.3.0"]
54 verbose parsed url { protocol: null,
54 verbose parsed url   slashes: null,
54 verbose parsed url   auth: null,
54 verbose parsed url   host: null,
54 verbose parsed url   port: null,
54 verbose parsed url   hostname: null,
54 verbose parsed url   hash: null,
54 verbose parsed url   search: null,
54 verbose parsed url   query: null,
54 verbose parsed url   pathname: '~0.3.0',
54 verbose parsed url   path: '~0.3.0',
54 verbose parsed url   href: '~0.3.0' }
55 verbose addNamed [ 'grunt-contrib-connect', '~0.3.0' ]
56 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
57 silly lockFile b7545c6e-grunt-contrib-jshint-0-1-1 grunt-contrib-jshint@~0.1.1
58 verbose lock grunt-contrib-jshint@~0.1.1 /Users/witchfinderx/.npm/b7545c6e-grunt-contrib-jshint-0-1-1.lock
59 silly lockFile 168fe00e-grunt-contrib-qunit-0-1-1 grunt-contrib-qunit@~0.1.1
60 verbose lock grunt-contrib-qunit@~0.1.1 /Users/witchfinderx/.npm/168fe00e-grunt-contrib-qunit-0-1-1.lock
61 verbose cache add [ 'time-grunt@~0.1.1', null ]
62 verbose cache add name=undefined spec="time-grunt@~0.1.1" args=["time-grunt@~0.1.1",null]
63 verbose parsed url { protocol: null,
63 verbose parsed url   slashes: null,
63 verbose parsed url   auth: null,
63 verbose parsed url   host: null,
63 verbose parsed url   port: null,
63 verbose parsed url   hostname: null,
63 verbose parsed url   hash: null,
63 verbose parsed url   search: null,
63 verbose parsed url   query: null,
63 verbose parsed url   pathname: 'time-grunt@~0.1.1',
63 verbose parsed url   path: 'time-grunt@~0.1.1',
63 verbose parsed url   href: 'time-grunt@~0.1.1' }
64 verbose cache add name="time-grunt" spec="~0.1.1" args=["time-grunt","~0.1.1"]
65 verbose parsed url { protocol: null,
65 verbose parsed url   slashes: null,
65 verbose parsed url   auth: null,
65 verbose parsed url   host: null,
65 verbose parsed url   port: null,
65 verbose parsed url   hostname: null,
65 verbose parsed url   hash: null,
65 verbose parsed url   search: null,
65 verbose parsed url   query: null,
65 verbose parsed url   pathname: '~0.1.1',
65 verbose parsed url   path: '~0.1.1',
65 verbose parsed url   href: '~0.1.1' }
66 verbose addNamed [ 'time-grunt', '~0.1.1' ]
67 verbose addNamed [ null, '>=0.1.1-0 <0.2.0-0' ]
68 silly lockFile e8d3c500-time-grunt-0-1-1 time-grunt@~0.1.1
69 verbose lock time-grunt@~0.1.1 /Users/witchfinderx/.npm/e8d3c500-time-grunt-0-1-1.lock
70 silly lockFile 122ae35d-grunt-contrib-concat-0-1-2 grunt-contrib-concat@~0.1.2
71 verbose lock grunt-contrib-concat@~0.1.2 /Users/witchfinderx/.npm/122ae35d-grunt-contrib-concat-0-1-2.lock
72 silly lockFile 70960ff2-grunt-contrib-watch-0-2-0 grunt-contrib-watch@~0.2.0
73 verbose lock grunt-contrib-watch@~0.2.0 /Users/witchfinderx/.npm/70960ff2-grunt-contrib-watch-0-2-0.lock
74 silly lockFile 1244d056-grunt-contrib-uglify-0-1-1 grunt-contrib-uglify@~0.1.1
75 verbose lock grunt-contrib-uglify@~0.1.1 /Users/witchfinderx/.npm/1244d056-grunt-contrib-uglify-0-1-1.lock
76 silly lockFile 9d1c9db7-grunt-contrib-clean-0-4-0 grunt-contrib-clean@~0.4.0
77 verbose lock grunt-contrib-clean@~0.4.0 /Users/witchfinderx/.npm/9d1c9db7-grunt-contrib-clean-0-4-0.lock
78 silly lockFile ec92e4f7-grunt-contrib-connect-0-3-0 grunt-contrib-connect@~0.3.0
79 verbose lock grunt-contrib-connect@~0.3.0 /Users/witchfinderx/.npm/ec92e4f7-grunt-contrib-connect-0-3-0.lock
80 silly addNameRange { name: 'grunt-contrib-jshint',
80 silly addNameRange   range: '>=0.1.1-0 <0.2.0-0',
80 silly addNameRange   hasData: false }
81 silly addNameRange { name: 'grunt-contrib-qunit',
81 silly addNameRange   range: '>=0.1.1-0 <0.2.0-0',
81 silly addNameRange   hasData: false }
82 silly addNameRange { name: 'time-grunt',
82 silly addNameRange   range: '>=0.1.1-0 <0.2.0-0',
82 silly addNameRange   hasData: false }
83 verbose url raw grunt-contrib-qunit
84 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-contrib-qunit' ]
85 verbose url resolved https://registry.npmjs.org/grunt-contrib-qunit
86 info trying registry request attempt 1 at 22:02:34
87 http GET https://registry.npmjs.org/grunt-contrib-qunit
88 silly addNameRange { name: 'grunt-contrib-concat',
88 silly addNameRange   range: '>=0.1.2-0 <0.2.0-0',
88 silly addNameRange   hasData: false }
89 silly addNameRange { name: 'grunt-contrib-watch',
89 silly addNameRange   range: '>=0.2.0-0 <0.3.0-0',
89 silly addNameRange   hasData: false }
90 silly addNameRange { name: 'grunt-contrib-uglify',
90 silly addNameRange   range: '>=0.1.1-0 <0.2.0-0',
90 silly addNameRange   hasData: false }
91 silly addNameRange { name: 'grunt-contrib-clean',
91 silly addNameRange   range: '>=0.4.0-0 <0.5.0-0',
91 silly addNameRange   hasData: false }
92 verbose url raw time-grunt
93 verbose url resolving [ 'https://registry.npmjs.org/', './time-grunt' ]
94 verbose url resolved https://registry.npmjs.org/time-grunt
95 info trying registry request attempt 1 at 22:02:34
96 http GET https://registry.npmjs.org/time-grunt
97 silly addNameRange { name: 'grunt-contrib-connect',
97 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
97 silly addNameRange   hasData: false }
98 verbose url raw grunt-contrib-watch
99 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-contrib-watch' ]
100 verbose url resolved https://registry.npmjs.org/grunt-contrib-watch
101 info trying registry request attempt 1 at 22:02:34
102 http GET https://registry.npmjs.org/grunt-contrib-watch
103 verbose url raw grunt-contrib-clean
104 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-contrib-clean' ]
105 verbose url resolved https://registry.npmjs.org/grunt-contrib-clean
106 info trying registry request attempt 1 at 22:02:34
107 http GET https://registry.npmjs.org/grunt-contrib-clean
108 verbose url raw grunt-contrib-connect
109 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-contrib-connect' ]
110 verbose url resolved https://registry.npmjs.org/grunt-contrib-connect
111 info trying registry request attempt 1 at 22:02:34
112 http GET https://registry.npmjs.org/grunt-contrib-connect
113 verbose url raw grunt-contrib-concat
114 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-contrib-concat' ]
115 verbose url resolved https://registry.npmjs.org/grunt-contrib-concat
116 info trying registry request attempt 1 at 22:02:35
117 verbose etag "C47O1YATV81DIGHN0WAP1UHGC"
118 http GET https://registry.npmjs.org/grunt-contrib-concat
119 verbose url raw grunt-contrib-jshint
120 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-contrib-jshint' ]
121 verbose url resolved https://registry.npmjs.org/grunt-contrib-jshint
122 info trying registry request attempt 1 at 22:02:35
123 verbose etag "5NVZHRWPBYKXR0MJB2PQCL2CQ"
124 http GET https://registry.npmjs.org/grunt-contrib-jshint
125 verbose url raw grunt-contrib-uglify
126 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-contrib-uglify' ]
127 verbose url resolved https://registry.npmjs.org/grunt-contrib-uglify
128 info trying registry request attempt 1 at 22:02:35
129 verbose etag "DAUV4YH0302VSLOIGBMQ9UAYK"
130 http GET https://registry.npmjs.org/grunt-contrib-uglify
131 http 200 https://registry.npmjs.org/time-grunt
132 silly registry.get cb [ 200,
132 silly registry.get   { vary: 'Accept',
132 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
132 silly registry.get     etag: '"IYUWUM4I9CW6Q335I15RY16E"',
132 silly registry.get     date: 'Sun, 03 Nov 2013 19:02:36 GMT',
132 silly registry.get     'content-type': 'application/json',
132 silly registry.get     'content-length': '7115' } ]
133 silly addNameRange number 2 { name: 'time-grunt',
133 silly addNameRange   range: '>=0.1.1-0 <0.2.0-0',
133 silly addNameRange   hasData: true }
134 silly addNameRange versions [ 'time-grunt', [ '0.1.0', '0.1.1', '0.1.2' ] ]
135 verbose addNamed [ 'time-grunt', '0.1.2' ]
136 verbose addNamed [ '0.1.2', '0.1.2' ]
137 silly lockFile c76fbdf9-time-grunt-0-1-2 time-grunt@0.1.2
138 verbose lock time-grunt@0.1.2 /Users/witchfinderx/.npm/c76fbdf9-time-grunt-0-1-2.lock
139 silly lockFile cbb4c15b--time-grunt-time-grunt-0-1-2-tgz https://registry.npmjs.org/time-grunt/-/time-grunt-0.1.2.tgz
140 verbose lock https://registry.npmjs.org/time-grunt/-/time-grunt-0.1.2.tgz /Users/witchfinderx/.npm/cbb4c15b--time-grunt-time-grunt-0-1-2-tgz.lock
141 verbose addRemoteTarball [ 'https://registry.npmjs.org/time-grunt/-/time-grunt-0.1.2.tgz',
141 verbose addRemoteTarball   '2f6393a9af2ff832ed4163e080779d1dc326a2c1' ]
142 info retry fetch attempt 1 at 22:02:40
143 verbose fetch to= /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/tmp.tgz
144 http GET https://registry.npmjs.org/time-grunt/-/time-grunt-0.1.2.tgz
145 http 304 https://registry.npmjs.org/grunt-contrib-concat
146 silly registry.get cb [ 304,
146 silly registry.get   { server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
146 silly registry.get     etag: '"C47O1YATV81DIGHN0WAP1UHGC"',
146 silly registry.get     date: 'Sun, 03 Nov 2013 19:02:40 GMT',
146 silly registry.get     'content-length': '0' } ]
147 verbose etag grunt-contrib-concat from cache
148 silly addNameRange number 2 { name: 'grunt-contrib-concat',
148 silly addNameRange   range: '>=0.1.2-0 <0.2.0-0',
148 silly addNameRange   hasData: true }
149 silly addNameRange versions [ 'grunt-contrib-concat',
149 silly addNameRange   [ '0.1.0',
149 silly addNameRange     '0.1.1',
149 silly addNameRange     '0.1.2',
149 silly addNameRange     '0.1.3',
149 silly addNameRange     '0.2.0',
149 silly addNameRange     '0.3.0',
149 silly addNameRange     '0.1.2-rc5',
149 silly addNameRange     '0.1.2-rc6' ] ]
150 verbose addNamed [ 'grunt-contrib-concat', '0.1.3' ]
151 verbose addNamed [ '0.1.3', '0.1.3' ]
152 silly lockFile 8f6177ac-grunt-contrib-concat-0-1-3 grunt-contrib-concat@0.1.3
153 verbose lock grunt-contrib-concat@0.1.3 /Users/witchfinderx/.npm/8f6177ac-grunt-contrib-concat-0-1-3.lock
154 silly lockFile 4af3b7f5-t-grunt-contrib-concat-0-1-3-tgz https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-0.1.3.tgz
155 verbose lock https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-0.1.3.tgz /Users/witchfinderx/.npm/4af3b7f5-t-grunt-contrib-concat-0-1-3-tgz.lock
156 verbose addRemoteTarball [ 'https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-0.1.3.tgz',
156 verbose addRemoteTarball   'df9a1a9bc8d75fcd00794b3d0f6d8ae8278523ac' ]
157 info retry fetch attempt 1 at 22:02:40
158 verbose fetch to= /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/tmp.tgz
159 http GET https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-0.1.3.tgz
160 http 200 https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-0.1.3.tgz
161 verbose tar unpack /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/tmp.tgz
162 silly lockFile 126c93f5-60501-0-9536067326553166-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package
163 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package /Users/witchfinderx/.npm/126c93f5-60501-0-9536067326553166-package.lock
164 silly lockFile e0eec6e3-60501-0-9536067326553166-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/tmp.tgz
165 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/tmp.tgz /Users/witchfinderx/.npm/e0eec6e3-60501-0-9536067326553166-tmp-tgz.lock
166 silly gunzTarPerm modes [ '755', '644' ]
167 silly gunzTarPerm extractEntry package.json
168 silly gunzTarPerm extractEntry .npmignore
169 silly gunzTarPerm extractEntry README.md
170 silly gunzTarPerm extractEntry Gruntfile.js
171 silly gunzTarPerm extractEntry docs/concat-examples.md
172 silly gunzTarPerm extractEntry docs/concat-options.md
173 silly gunzTarPerm extractEntry docs/concat-overview.md
174 silly gunzTarPerm extractEntry CONTRIBUTING.md
175 silly gunzTarPerm extractEntry .jshintrc
176 silly gunzTarPerm extractEntry .travis.yml
177 silly gunzTarPerm extractEntry LICENSE-MIT
178 silly gunzTarPerm extractEntry AUTHORS
179 silly gunzTarPerm extractEntry CHANGELOG
180 silly gunzTarPerm extractEntry tasks/concat.js
181 silly gunzTarPerm extractEntry tasks/lib/comment.js
182 silly gunzTarPerm extractEntry test/concat_test.js
183 silly gunzTarPerm extractEntry test/expected/custom_options
184 silly gunzTarPerm extractEntry test/expected/default_options
185 silly gunzTarPerm extractEntry test/expected/handling_invalid_files
186 silly gunzTarPerm extractEntry test/fixtures/banner.js
187 silly gunzTarPerm extractEntry test/fixtures/banner2.js
188 silly gunzTarPerm extractEntry test/fixtures/banner3.js
189 silly gunzTarPerm extractEntry test/fixtures/file1
190 silly gunzTarPerm extractEntry test/fixtures/file2
191 silly lockFile 126c93f5-60501-0-9536067326553166-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package
192 silly lockFile 126c93f5-60501-0-9536067326553166-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package
193 silly lockFile e0eec6e3-60501-0-9536067326553166-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/tmp.tgz
194 silly lockFile e0eec6e3-60501-0-9536067326553166-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/tmp.tgz
195 verbose tar pack [ '/Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz',
195 verbose tar pack   '/var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package' ]
196 verbose tarball /Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz
197 verbose folder /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package
198 silly lockFile 126c93f5-60501-0-9536067326553166-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package
199 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package /Users/witchfinderx/.npm/126c93f5-60501-0-9536067326553166-package.lock
200 silly lockFile 5cd82708-contrib-concat-0-1-3-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz
201 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz /Users/witchfinderx/.npm/5cd82708-contrib-concat-0-1-3-package-tgz.lock
202 silly lockFile 126c93f5-60501-0-9536067326553166-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package
203 silly lockFile 126c93f5-60501-0-9536067326553166-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360501-0.9536067326553166/package
204 silly lockFile 5cd82708-contrib-concat-0-1-3-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz
205 silly lockFile 5cd82708-contrib-concat-0-1-3-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz
206 silly lockFile 15cd421c-unt-contrib-concat-0-1-3-package /Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package
207 verbose lock /Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package /Users/witchfinderx/.npm/15cd421c-unt-contrib-concat-0-1-3-package.lock
208 silly lockFile 15cd421c-unt-contrib-concat-0-1-3-package /Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package
209 silly lockFile 15cd421c-unt-contrib-concat-0-1-3-package /Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package
210 verbose tar unpack /Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz
211 silly lockFile 8368c3a2-unt-contrib-concat-0-1-3-package tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package
212 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package /Users/witchfinderx/.npm/8368c3a2-unt-contrib-concat-0-1-3-package.lock
213 silly lockFile 5cd82708-contrib-concat-0-1-3-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz
214 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz /Users/witchfinderx/.npm/5cd82708-contrib-concat-0-1-3-package-tgz.lock
215 silly gunzTarPerm modes [ '755', '644' ]
216 silly gunzTarPerm extractEntry package.json
217 silly gunzTarPerm extractEntry .npmignore
218 silly gunzTarPerm extractEntry README.md
219 silly gunzTarPerm extractEntry Gruntfile.js
220 silly gunzTarPerm extractEntry CHANGELOG
221 silly gunzTarPerm extractEntry CONTRIBUTING.md
222 silly gunzTarPerm extractEntry .jshintrc
223 silly gunzTarPerm extractEntry LICENSE-MIT
224 silly gunzTarPerm extractEntry .travis.yml
225 silly gunzTarPerm extractEntry docs/concat-examples.md
226 silly gunzTarPerm extractEntry docs/concat-options.md
227 silly gunzTarPerm extractEntry docs/concat-overview.md
228 silly gunzTarPerm extractEntry AUTHORS
229 silly gunzTarPerm extractEntry tasks/concat.js
230 silly gunzTarPerm extractEntry tasks/lib/comment.js
231 silly gunzTarPerm extractEntry test/concat_test.js
232 silly gunzTarPerm extractEntry test/expected/custom_options
233 silly gunzTarPerm extractEntry test/expected/default_options
234 silly gunzTarPerm extractEntry test/expected/handling_invalid_files
235 silly gunzTarPerm extractEntry test/fixtures/banner.js
236 silly gunzTarPerm extractEntry test/fixtures/banner2.js
237 silly gunzTarPerm extractEntry test/fixtures/banner3.js
238 silly gunzTarPerm extractEntry test/fixtures/file1
239 silly gunzTarPerm extractEntry test/fixtures/file2
240 silly lockFile 8368c3a2-unt-contrib-concat-0-1-3-package tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package
241 silly lockFile 8368c3a2-unt-contrib-concat-0-1-3-package tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package
242 silly lockFile 5cd82708-contrib-concat-0-1-3-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz
243 silly lockFile 5cd82708-contrib-concat-0-1-3-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz
244 verbose chmod /Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz 644
245 verbose chown /Users/witchfinderx/.npm/grunt-contrib-concat/0.1.3/package.tgz [ 501, 20 ]
246 silly lockFile 4af3b7f5-t-grunt-contrib-concat-0-1-3-tgz https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-0.1.3.tgz
247 silly lockFile 4af3b7f5-t-grunt-contrib-concat-0-1-3-tgz https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-0.1.3.tgz
248 silly lockFile 8f6177ac-grunt-contrib-concat-0-1-3 grunt-contrib-concat@0.1.3
249 silly lockFile 8f6177ac-grunt-contrib-concat-0-1-3 grunt-contrib-concat@0.1.3
250 silly lockFile 122ae35d-grunt-contrib-concat-0-1-2 grunt-contrib-concat@~0.1.2
251 silly lockFile 122ae35d-grunt-contrib-concat-0-1-2 grunt-contrib-concat@~0.1.2
252 http 200 https://registry.npmjs.org/grunt-contrib-clean
253 silly registry.get cb [ 200,
253 silly registry.get   { vary: 'Accept',
253 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
253 silly registry.get     etag: '"6KUGO55NVR6DEOUSLXDMA057B"',
253 silly registry.get     date: 'Sun, 03 Nov 2013 19:02:37 GMT',
253 silly registry.get     'content-type': 'application/json',
253 silly registry.get     'content-length': '43429' } ]
254 silly addNameRange number 2 { name: 'grunt-contrib-clean',
254 silly addNameRange   range: '>=0.4.0-0 <0.5.0-0',
254 silly addNameRange   hasData: true }
255 silly addNameRange versions [ 'grunt-contrib-clean',
255 silly addNameRange   [ '0.1.0',
255 silly addNameRange     '0.2.0',
255 silly addNameRange     '0.3.0',
255 silly addNameRange     '0.3.1',
255 silly addNameRange     '0.3.2',
255 silly addNameRange     '0.4.0',
255 silly addNameRange     '0.4.1',
255 silly addNameRange     '0.5.0',
255 silly addNameRange     '0.4.0-a',
255 silly addNameRange     '0.4.0-rc5',
255 silly addNameRange     '0.4.0-rc6' ] ]
256 verbose addNamed [ 'grunt-contrib-clean', '0.4.1' ]
257 verbose addNamed [ '0.4.1', '0.4.1' ]
258 silly lockFile d4970290-grunt-contrib-clean-0-4-1 grunt-contrib-clean@0.4.1
259 verbose lock grunt-contrib-clean@0.4.1 /Users/witchfinderx/.npm/d4970290-grunt-contrib-clean-0-4-1.lock
260 silly lockFile 26fa4724-an-grunt-contrib-clean-0-4-1-tgz https://registry.npmjs.org/grunt-contrib-clean/-/grunt-contrib-clean-0.4.1.tgz
261 verbose lock https://registry.npmjs.org/grunt-contrib-clean/-/grunt-contrib-clean-0.4.1.tgz /Users/witchfinderx/.npm/26fa4724-an-grunt-contrib-clean-0-4-1-tgz.lock
262 verbose addRemoteTarball [ 'https://registry.npmjs.org/grunt-contrib-clean/-/grunt-contrib-clean-0.4.1.tgz',
262 verbose addRemoteTarball   '7f8f46e2f2a7187e9c2d083ab30262aa6a64e334' ]
263 info retry fetch attempt 1 at 22:02:56
264 verbose fetch to= /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/tmp.tgz
265 http GET https://registry.npmjs.org/grunt-contrib-clean/-/grunt-contrib-clean-0.4.1.tgz
266 http 200 https://registry.npmjs.org/time-grunt/-/time-grunt-0.1.2.tgz
267 verbose tar unpack /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/tmp.tgz
268 silly lockFile b5ff599c-329-0-027473015477880836-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package
269 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package /Users/witchfinderx/.npm/b5ff599c-329-0-027473015477880836-package.lock
270 silly lockFile 64351892-329-0-027473015477880836-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/tmp.tgz
271 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/tmp.tgz /Users/witchfinderx/.npm/64351892-329-0-027473015477880836-tmp-tgz.lock
272 silly gunzTarPerm modes [ '755', '644' ]
273 silly gunzTarPerm extractEntry package.json
274 silly gunzTarPerm extractEntry time-grunt.js
275 silly gunzTarPerm extractEntry readme.md
276 silly lockFile b5ff599c-329-0-027473015477880836-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package
277 silly lockFile b5ff599c-329-0-027473015477880836-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package
278 silly lockFile 64351892-329-0-027473015477880836-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/tmp.tgz
279 silly lockFile 64351892-329-0-027473015477880836-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/tmp.tgz
280 verbose tar pack [ '/Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz',
280 verbose tar pack   '/var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package' ]
281 verbose tarball /Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz
282 verbose folder /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package
283 silly lockFile b5ff599c-329-0-027473015477880836-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package
284 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package /Users/witchfinderx/.npm/b5ff599c-329-0-027473015477880836-package.lock
285 silly lockFile 185340ad-npm-time-grunt-0-1-2-package-tgz tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz
286 verbose lock tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz /Users/witchfinderx/.npm/185340ad-npm-time-grunt-0-1-2-package-tgz.lock
287 silly lockFile b5ff599c-329-0-027473015477880836-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package
288 silly lockFile b5ff599c-329-0-027473015477880836-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505360329-0.027473015477880836/package
289 silly lockFile 185340ad-npm-time-grunt-0-1-2-package-tgz tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz
290 silly lockFile 185340ad-npm-time-grunt-0-1-2-package-tgz tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz
291 silly lockFile 2a31280b-erx-npm-time-grunt-0-1-2-package /Users/witchfinderx/.npm/time-grunt/0.1.2/package
292 verbose lock /Users/witchfinderx/.npm/time-grunt/0.1.2/package /Users/witchfinderx/.npm/2a31280b-erx-npm-time-grunt-0-1-2-package.lock
293 silly lockFile 2a31280b-erx-npm-time-grunt-0-1-2-package /Users/witchfinderx/.npm/time-grunt/0.1.2/package
294 silly lockFile 2a31280b-erx-npm-time-grunt-0-1-2-package /Users/witchfinderx/.npm/time-grunt/0.1.2/package
295 verbose tar unpack /Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz
296 silly lockFile 190c5774-erx-npm-time-grunt-0-1-2-package tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package
297 verbose lock tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package /Users/witchfinderx/.npm/190c5774-erx-npm-time-grunt-0-1-2-package.lock
298 silly lockFile 185340ad-npm-time-grunt-0-1-2-package-tgz tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz
299 verbose lock tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz /Users/witchfinderx/.npm/185340ad-npm-time-grunt-0-1-2-package-tgz.lock
300 silly gunzTarPerm modes [ '755', '644' ]
301 silly gunzTarPerm extractEntry package.json
302 silly gunzTarPerm extractEntry time-grunt.js
303 silly gunzTarPerm extractEntry readme.md
304 silly lockFile 190c5774-erx-npm-time-grunt-0-1-2-package tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package
305 silly lockFile 190c5774-erx-npm-time-grunt-0-1-2-package tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package
306 silly lockFile 185340ad-npm-time-grunt-0-1-2-package-tgz tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz
307 silly lockFile 185340ad-npm-time-grunt-0-1-2-package-tgz tar:///Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz
308 verbose chmod /Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz 644
309 verbose chown /Users/witchfinderx/.npm/time-grunt/0.1.2/package.tgz [ 501, 20 ]
310 silly lockFile cbb4c15b--time-grunt-time-grunt-0-1-2-tgz https://registry.npmjs.org/time-grunt/-/time-grunt-0.1.2.tgz
311 silly lockFile cbb4c15b--time-grunt-time-grunt-0-1-2-tgz https://registry.npmjs.org/time-grunt/-/time-grunt-0.1.2.tgz
312 silly lockFile c76fbdf9-time-grunt-0-1-2 time-grunt@0.1.2
313 silly lockFile c76fbdf9-time-grunt-0-1-2 time-grunt@0.1.2
314 silly lockFile e8d3c500-time-grunt-0-1-1 time-grunt@~0.1.1
315 silly lockFile e8d3c500-time-grunt-0-1-1 time-grunt@~0.1.1
316 http 200 https://registry.npmjs.org/grunt-contrib-clean/-/grunt-contrib-clean-0.4.1.tgz
317 verbose tar unpack /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/tmp.tgz
318 silly lockFile 07fdb480-76001-0-8028307002969086-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package
319 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package /Users/witchfinderx/.npm/07fdb480-76001-0-8028307002969086-package.lock
320 silly lockFile f5474f71-76001-0-8028307002969086-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/tmp.tgz
321 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/tmp.tgz /Users/witchfinderx/.npm/f5474f71-76001-0-8028307002969086-tmp-tgz.lock
322 silly gunzTarPerm modes [ '755', '644' ]
323 silly gunzTarPerm extractEntry package.json
324 silly gunzTarPerm extractEntry .npmignore
325 silly gunzTarPerm extractEntry README.md
326 silly gunzTarPerm extractEntry Gruntfile.js
327 silly gunzTarPerm extractEntry docs/clean-examples.md
328 silly gunzTarPerm extractEntry docs/clean-options.md
329 silly gunzTarPerm extractEntry docs/clean-overview.md
330 silly gunzTarPerm extractEntry docs/overview.md
331 silly gunzTarPerm extractEntry CONTRIBUTING.md
332 silly gunzTarPerm extractEntry .jshintrc
333 silly gunzTarPerm extractEntry .travis.yml
334 silly gunzTarPerm extractEntry LICENSE-MIT
335 silly gunzTarPerm extractEntry AUTHORS
336 silly gunzTarPerm extractEntry CHANGELOG
337 silly gunzTarPerm extractEntry tasks/clean.js
338 silly gunzTarPerm extractEntry test/clean_test.js
339 silly gunzTarPerm extractEntry test/fixtures/sample_long/long.txt
340 silly gunzTarPerm extractEntry test/fixtures/sample_short/short.txt
341 silly lockFile 07fdb480-76001-0-8028307002969086-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package
342 silly lockFile 07fdb480-76001-0-8028307002969086-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package
343 silly lockFile f5474f71-76001-0-8028307002969086-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/tmp.tgz
344 silly lockFile f5474f71-76001-0-8028307002969086-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/tmp.tgz
345 verbose tar pack [ '/Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz',
345 verbose tar pack   '/var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package' ]
346 verbose tarball /Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz
347 verbose folder /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package
348 silly lockFile 07fdb480-76001-0-8028307002969086-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package
349 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package /Users/witchfinderx/.npm/07fdb480-76001-0-8028307002969086-package.lock
350 silly lockFile 032e2b5e--contrib-clean-0-4-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz
351 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz /Users/witchfinderx/.npm/032e2b5e--contrib-clean-0-4-1-package-tgz.lock
352 silly lockFile 07fdb480-76001-0-8028307002969086-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package
353 silly lockFile 07fdb480-76001-0-8028307002969086-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505376001-0.8028307002969086/package
354 silly lockFile 032e2b5e--contrib-clean-0-4-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz
355 silly lockFile 032e2b5e--contrib-clean-0-4-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz
356 silly lockFile 01ccbf5b-runt-contrib-clean-0-4-1-package /Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package
357 verbose lock /Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package /Users/witchfinderx/.npm/01ccbf5b-runt-contrib-clean-0-4-1-package.lock
358 silly lockFile 01ccbf5b-runt-contrib-clean-0-4-1-package /Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package
359 silly lockFile 01ccbf5b-runt-contrib-clean-0-4-1-package /Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package
360 verbose tar unpack /Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz
361 silly lockFile bc48fd02-runt-contrib-clean-0-4-1-package tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package
362 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package /Users/witchfinderx/.npm/bc48fd02-runt-contrib-clean-0-4-1-package.lock
363 silly lockFile 032e2b5e--contrib-clean-0-4-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz
364 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz /Users/witchfinderx/.npm/032e2b5e--contrib-clean-0-4-1-package-tgz.lock
365 silly gunzTarPerm modes [ '755', '644' ]
366 silly gunzTarPerm extractEntry package.json
367 silly gunzTarPerm extractEntry .npmignore
368 silly gunzTarPerm extractEntry README.md
369 silly gunzTarPerm extractEntry Gruntfile.js
370 silly gunzTarPerm extractEntry CHANGELOG
371 silly gunzTarPerm extractEntry CONTRIBUTING.md
372 silly gunzTarPerm extractEntry .jshintrc
373 silly gunzTarPerm extractEntry LICENSE-MIT
374 silly gunzTarPerm extractEntry .travis.yml
375 silly gunzTarPerm extractEntry docs/clean-examples.md
376 silly gunzTarPerm extractEntry docs/clean-options.md
377 silly gunzTarPerm extractEntry docs/clean-overview.md
378 silly gunzTarPerm extractEntry docs/overview.md
379 silly gunzTarPerm extractEntry AUTHORS
380 silly gunzTarPerm extractEntry tasks/clean.js
381 silly gunzTarPerm extractEntry test/clean_test.js
382 silly gunzTarPerm extractEntry test/fixtures/sample_long/long.txt
383 silly gunzTarPerm extractEntry test/fixtures/sample_short/short.txt
384 silly lockFile bc48fd02-runt-contrib-clean-0-4-1-package tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package
385 silly lockFile bc48fd02-runt-contrib-clean-0-4-1-package tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package
386 silly lockFile 032e2b5e--contrib-clean-0-4-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz
387 silly lockFile 032e2b5e--contrib-clean-0-4-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz
388 verbose chmod /Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz 644
389 verbose chown /Users/witchfinderx/.npm/grunt-contrib-clean/0.4.1/package.tgz [ 501, 20 ]
390 silly lockFile 26fa4724-an-grunt-contrib-clean-0-4-1-tgz https://registry.npmjs.org/grunt-contrib-clean/-/grunt-contrib-clean-0.4.1.tgz
391 silly lockFile 26fa4724-an-grunt-contrib-clean-0-4-1-tgz https://registry.npmjs.org/grunt-contrib-clean/-/grunt-contrib-clean-0.4.1.tgz
392 silly lockFile d4970290-grunt-contrib-clean-0-4-1 grunt-contrib-clean@0.4.1
393 silly lockFile d4970290-grunt-contrib-clean-0-4-1 grunt-contrib-clean@0.4.1
394 silly lockFile 9d1c9db7-grunt-contrib-clean-0-4-0 grunt-contrib-clean@~0.4.0
395 silly lockFile 9d1c9db7-grunt-contrib-clean-0-4-0 grunt-contrib-clean@~0.4.0
396 http 200 https://registry.npmjs.org/grunt-contrib-jshint
397 silly registry.get cb [ 200,
397 silly registry.get   { vary: 'Accept',
397 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
397 silly registry.get     etag: '"5XV3ZO5LC3RKXKLTI208USJRG"',
397 silly registry.get     date: 'Sun, 03 Nov 2013 19:02:40 GMT',
397 silly registry.get     'content-type': 'application/json',
397 silly registry.get     'content-length': '194755' } ]
398 silly addNameRange number 2 { name: 'grunt-contrib-jshint',
398 silly addNameRange   range: '>=0.1.1-0 <0.2.0-0',
398 silly addNameRange   hasData: true }
399 silly addNameRange versions [ 'grunt-contrib-jshint',
399 silly addNameRange   [ '0.1.0',
399 silly addNameRange     '0.1.1',
399 silly addNameRange     '0.2.0',
399 silly addNameRange     '0.3.0',
399 silly addNameRange     '0.4.0',
399 silly addNameRange     '0.4.1',
399 silly addNameRange     '0.4.2',
399 silly addNameRange     '0.4.3',
399 silly addNameRange     '0.5.0',
399 silly addNameRange     '0.5.1',
399 silly addNameRange     '0.5.2',
399 silly addNameRange     '0.5.3',
399 silly addNameRange     '0.5.4',
399 silly addNameRange     '0.6.0',
399 silly addNameRange     '0.6.1',
399 silly addNameRange     '0.6.2',
399 silly addNameRange     '0.6.3',
399 silly addNameRange     '0.6.4',
399 silly addNameRange     '0.6.5',
399 silly addNameRange     '0.7.0',
399 silly addNameRange     '0.7.1',
399 silly addNameRange     '0.1.1-rc5',
399 silly addNameRange     '0.1.1-rc6' ] ]
400 verbose addNamed [ 'grunt-contrib-jshint', '0.1.1' ]
401 verbose addNamed [ '0.1.1', '0.1.1' ]
402 silly lockFile 551e0755-grunt-contrib-jshint-0-1-1 grunt-contrib-jshint@0.1.1
403 verbose lock grunt-contrib-jshint@0.1.1 /Users/witchfinderx/.npm/551e0755-grunt-contrib-jshint-0-1-1.lock
404 silly lockFile 0612156d-t-grunt-contrib-jshint-0-1-1-tgz https://registry.npmjs.org/grunt-contrib-jshint/-/grunt-contrib-jshint-0.1.1.tgz
405 verbose lock https://registry.npmjs.org/grunt-contrib-jshint/-/grunt-contrib-jshint-0.1.1.tgz /Users/witchfinderx/.npm/0612156d-t-grunt-contrib-jshint-0-1-1-tgz.lock
406 verbose addRemoteTarball [ 'https://registry.npmjs.org/grunt-contrib-jshint/-/grunt-contrib-jshint-0.1.1.tgz',
406 verbose addRemoteTarball   'a9e258141e6b2f467c577f5672d97ec64ef2583d' ]
407 info retry fetch attempt 1 at 22:03:31
408 verbose fetch to= /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/tmp.tgz
409 http GET https://registry.npmjs.org/grunt-contrib-jshint/-/grunt-contrib-jshint-0.1.1.tgz
410 http 200 https://registry.npmjs.org/grunt-contrib-jshint/-/grunt-contrib-jshint-0.1.1.tgz
411 http 200 https://registry.npmjs.org/grunt-contrib-uglify
412 silly registry.get cb [ 200,
412 silly registry.get   { vary: 'Accept',
412 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
412 silly registry.get     etag: '"5ZN6ETGRX94MYDZ80RD15X0YK"',
412 silly registry.get     date: 'Sun, 03 Nov 2013 19:02:56 GMT',
412 silly registry.get     'content-type': 'application/json',
412 silly registry.get     'content-length': '136987' } ]
413 silly addNameRange number 2 { name: 'grunt-contrib-uglify',
413 silly addNameRange   range: '>=0.1.1-0 <0.2.0-0',
413 silly addNameRange   hasData: true }
414 silly addNameRange versions [ 'grunt-contrib-uglify',
414 silly addNameRange   [ '0.1.0',
414 silly addNameRange     '0.1.1',
414 silly addNameRange     '0.1.2',
414 silly addNameRange     '0.2.0',
414 silly addNameRange     '0.2.1',
414 silly addNameRange     '0.2.2',
414 silly addNameRange     '0.2.3',
414 silly addNameRange     '0.2.4',
414 silly addNameRange     '0.2.5',
414 silly addNameRange     '0.1.1-rc5',
414 silly addNameRange     '0.1.1-rc6' ] ]
415 verbose addNamed [ 'grunt-contrib-uglify', '0.1.2' ]
416 verbose addNamed [ '0.1.2', '0.1.2' ]
417 silly lockFile 1bf15cfe-grunt-contrib-uglify-0-1-2 grunt-contrib-uglify@0.1.2
418 verbose lock grunt-contrib-uglify@0.1.2 /Users/witchfinderx/.npm/1bf15cfe-grunt-contrib-uglify-0-1-2.lock
419 silly lockFile 1bf15cfe-grunt-contrib-uglify-0-1-2 grunt-contrib-uglify@0.1.2
420 silly lockFile 1bf15cfe-grunt-contrib-uglify-0-1-2 grunt-contrib-uglify@0.1.2
421 silly lockFile 1244d056-grunt-contrib-uglify-0-1-1 grunt-contrib-uglify@~0.1.1
422 silly lockFile 1244d056-grunt-contrib-uglify-0-1-1 grunt-contrib-uglify@~0.1.1
423 verbose tar unpack /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/tmp.tgz
424 silly lockFile 68b6a736-1008-0-16050144284963608-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package
425 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package /Users/witchfinderx/.npm/68b6a736-1008-0-16050144284963608-package.lock
426 silly lockFile c2143c24-1008-0-16050144284963608-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/tmp.tgz
427 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/tmp.tgz /Users/witchfinderx/.npm/c2143c24-1008-0-16050144284963608-tmp-tgz.lock
428 silly gunzTarPerm modes [ '755', '644' ]
429 silly gunzTarPerm extractEntry package.json
430 silly gunzTarPerm extractEntry .npmignore
431 silly gunzTarPerm extractEntry README.md
432 silly gunzTarPerm extractEntry Gruntfile.js
433 silly gunzTarPerm extractEntry docs/jshint-examples.md
434 silly gunzTarPerm extractEntry docs/jshint-options.md
435 silly gunzTarPerm extractEntry docs/jshint-overview.md
436 silly gunzTarPerm extractEntry CONTRIBUTING.md
437 silly gunzTarPerm extractEntry .jshintrc
438 silly gunzTarPerm extractEntry .travis.yml
439 silly gunzTarPerm extractEntry LICENSE-MIT
440 silly gunzTarPerm extractEntry AUTHORS
441 silly gunzTarPerm extractEntry CHANGELOG
442 silly gunzTarPerm extractEntry tasks/jshint.js
443 silly gunzTarPerm extractEntry tasks/lib/jshint.js
444 silly gunzTarPerm extractEntry test/jshint_test.js
445 silly gunzTarPerm extractEntry test/fixtures/lint.txt
446 silly lockFile 68b6a736-1008-0-16050144284963608-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package
447 silly lockFile 68b6a736-1008-0-16050144284963608-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package
448 silly lockFile c2143c24-1008-0-16050144284963608-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/tmp.tgz
449 silly lockFile c2143c24-1008-0-16050144284963608-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/tmp.tgz
450 verbose tar pack [ '/Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz',
450 verbose tar pack   '/var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package' ]
451 verbose tarball /Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz
452 verbose folder /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package
453 silly lockFile 68b6a736-1008-0-16050144284963608-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package
454 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package /Users/witchfinderx/.npm/68b6a736-1008-0-16050144284963608-package.lock
455 silly lockFile df89bd74-contrib-jshint-0-1-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz
456 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz /Users/witchfinderx/.npm/df89bd74-contrib-jshint-0-1-1-package-tgz.lock
457 silly lockFile 68b6a736-1008-0-16050144284963608-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package
458 silly lockFile 68b6a736-1008-0-16050144284963608-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505411008-0.16050144284963608/package
459 silly lockFile df89bd74-contrib-jshint-0-1-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz
460 silly lockFile df89bd74-contrib-jshint-0-1-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz
461 silly lockFile 9b26c8a6-unt-contrib-jshint-0-1-1-package /Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package
462 verbose lock /Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package /Users/witchfinderx/.npm/9b26c8a6-unt-contrib-jshint-0-1-1-package.lock
463 silly lockFile 9b26c8a6-unt-contrib-jshint-0-1-1-package /Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package
464 silly lockFile 9b26c8a6-unt-contrib-jshint-0-1-1-package /Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package
465 verbose tar unpack /Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz
466 silly lockFile 07224a73-unt-contrib-jshint-0-1-1-package tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package
467 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package /Users/witchfinderx/.npm/07224a73-unt-contrib-jshint-0-1-1-package.lock
468 silly lockFile df89bd74-contrib-jshint-0-1-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz
469 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz /Users/witchfinderx/.npm/df89bd74-contrib-jshint-0-1-1-package-tgz.lock
470 silly gunzTarPerm modes [ '755', '644' ]
471 silly gunzTarPerm extractEntry package.json
472 silly gunzTarPerm extractEntry .npmignore
473 silly gunzTarPerm extractEntry README.md
474 silly gunzTarPerm extractEntry Gruntfile.js
475 silly gunzTarPerm extractEntry CHANGELOG
476 silly gunzTarPerm extractEntry CONTRIBUTING.md
477 silly gunzTarPerm extractEntry .jshintrc
478 silly gunzTarPerm extractEntry LICENSE-MIT
479 silly gunzTarPerm extractEntry .travis.yml
480 silly gunzTarPerm extractEntry docs/jshint-examples.md
481 silly gunzTarPerm extractEntry docs/jshint-options.md
482 silly gunzTarPerm extractEntry docs/jshint-overview.md
483 silly gunzTarPerm extractEntry AUTHORS
484 silly gunzTarPerm extractEntry tasks/jshint.js
485 silly gunzTarPerm extractEntry tasks/lib/jshint.js
486 silly gunzTarPerm extractEntry test/jshint_test.js
487 silly gunzTarPerm extractEntry test/fixtures/lint.txt
488 silly lockFile 07224a73-unt-contrib-jshint-0-1-1-package tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package
489 silly lockFile 07224a73-unt-contrib-jshint-0-1-1-package tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package
490 silly lockFile df89bd74-contrib-jshint-0-1-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz
491 silly lockFile df89bd74-contrib-jshint-0-1-1-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz
492 verbose chmod /Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz 644
493 verbose chown /Users/witchfinderx/.npm/grunt-contrib-jshint/0.1.1/package.tgz [ 501, 20 ]
494 silly lockFile 0612156d-t-grunt-contrib-jshint-0-1-1-tgz https://registry.npmjs.org/grunt-contrib-jshint/-/grunt-contrib-jshint-0.1.1.tgz
495 silly lockFile 0612156d-t-grunt-contrib-jshint-0-1-1-tgz https://registry.npmjs.org/grunt-contrib-jshint/-/grunt-contrib-jshint-0.1.1.tgz
496 silly lockFile 551e0755-grunt-contrib-jshint-0-1-1 grunt-contrib-jshint@0.1.1
497 silly lockFile 551e0755-grunt-contrib-jshint-0-1-1 grunt-contrib-jshint@0.1.1
498 silly lockFile b7545c6e-grunt-contrib-jshint-0-1-1 grunt-contrib-jshint@~0.1.1
499 silly lockFile b7545c6e-grunt-contrib-jshint-0-1-1 grunt-contrib-jshint@~0.1.1
500 http 200 https://registry.npmjs.org/grunt-contrib-connect
501 silly registry.get cb [ 200,
501 silly registry.get   { vary: 'Accept',
501 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
501 silly registry.get     etag: '"50NTEBO70LWH8L4KN7BSMMYRL"',
501 silly registry.get     date: 'Sun, 03 Nov 2013 19:02:37 GMT',
501 silly registry.get     'content-type': 'application/json',
501 silly registry.get     'content-length': '90122' } ]
502 silly addNameRange number 2 { name: 'grunt-contrib-connect',
502 silly addNameRange   range: '>=0.3.0-0 <0.4.0-0',
502 silly addNameRange   hasData: true }
503 silly addNameRange versions [ 'grunt-contrib-connect',
503 silly addNameRange   [ '0.1.0',
503 silly addNameRange     '0.1.1',
503 silly addNameRange     '0.1.2',
503 silly addNameRange     '0.2.0',
503 silly addNameRange     '0.3.0',
503 silly addNameRange     '0.4.0',
503 silly addNameRange     '0.4.1',
503 silly addNameRange     '0.4.2',
503 silly addNameRange     '0.5.0',
503 silly addNameRange     '0.1.1-rc6' ] ]
504 verbose addNamed [ 'grunt-contrib-connect', '0.3.0' ]
505 verbose addNamed [ '0.3.0', '0.3.0' ]
506 silly lockFile 206c5a79-grunt-contrib-connect-0-3-0 grunt-contrib-connect@0.3.0
507 verbose lock grunt-contrib-connect@0.3.0 /Users/witchfinderx/.npm/206c5a79-grunt-contrib-connect-0-3-0.lock
508 silly lockFile 16cb4eb4--grunt-contrib-connect-0-3-0-tgz https://registry.npmjs.org/grunt-contrib-connect/-/grunt-contrib-connect-0.3.0.tgz
509 verbose lock https://registry.npmjs.org/grunt-contrib-connect/-/grunt-contrib-connect-0.3.0.tgz /Users/witchfinderx/.npm/16cb4eb4--grunt-contrib-connect-0-3-0-tgz.lock
510 verbose addRemoteTarball [ 'https://registry.npmjs.org/grunt-contrib-connect/-/grunt-contrib-connect-0.3.0.tgz',
510 verbose addRemoteTarball   '1fa25353f1ad80b792288758235faff98b583ca5' ]
511 info retry fetch attempt 1 at 22:03:34
512 verbose fetch to= /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/tmp.tgz
513 http GET https://registry.npmjs.org/grunt-contrib-connect/-/grunt-contrib-connect-0.3.0.tgz
514 http 200 https://registry.npmjs.org/grunt-contrib-connect/-/grunt-contrib-connect-0.3.0.tgz
515 verbose tar unpack /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/tmp.tgz
516 silly lockFile b630c726-414250-0-209771134192124-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package
517 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package /Users/witchfinderx/.npm/b630c726-414250-0-209771134192124-package.lock
518 silly lockFile ee5c46fd-414250-0-209771134192124-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/tmp.tgz
519 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/tmp.tgz /Users/witchfinderx/.npm/ee5c46fd-414250-0-209771134192124-tmp-tgz.lock
520 silly gunzTarPerm modes [ '755', '644' ]
521 silly gunzTarPerm extractEntry package.json
522 silly gunzTarPerm extractEntry Gruntfile.js
523 silly gunzTarPerm extractEntry .travis.yml
524 silly gunzTarPerm extractEntry AUTHORS
525 silly gunzTarPerm extractEntry CHANGELOG
526 silly gunzTarPerm extractEntry CONTRIBUTING.md
527 silly gunzTarPerm extractEntry LICENSE-MIT
528 silly gunzTarPerm extractEntry tasks/connect.js
529 silly lockFile b630c726-414250-0-209771134192124-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package
530 silly lockFile b630c726-414250-0-209771134192124-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package
531 silly lockFile ee5c46fd-414250-0-209771134192124-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/tmp.tgz
532 silly lockFile ee5c46fd-414250-0-209771134192124-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/tmp.tgz
533 verbose tar pack [ '/Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz',
533 verbose tar pack   '/var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package' ]
534 verbose tarball /Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz
535 verbose folder /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package
536 silly lockFile b630c726-414250-0-209771134192124-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package
537 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package /Users/witchfinderx/.npm/b630c726-414250-0-209771134192124-package.lock
538 silly lockFile c85950db-ontrib-connect-0-3-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz
539 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz /Users/witchfinderx/.npm/c85950db-ontrib-connect-0-3-0-package-tgz.lock
540 silly lockFile b630c726-414250-0-209771134192124-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package
541 silly lockFile b630c726-414250-0-209771134192124-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505414250-0.209771134192124/package
542 silly lockFile c85950db-ontrib-connect-0-3-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz
543 silly lockFile c85950db-ontrib-connect-0-3-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz
544 silly lockFile 9b16a3ec-nt-contrib-connect-0-3-0-package /Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package
545 verbose lock /Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package /Users/witchfinderx/.npm/9b16a3ec-nt-contrib-connect-0-3-0-package.lock
546 silly lockFile 9b16a3ec-nt-contrib-connect-0-3-0-package /Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package
547 silly lockFile 9b16a3ec-nt-contrib-connect-0-3-0-package /Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package
548 verbose tar unpack /Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz
549 silly lockFile 86d93852-nt-contrib-connect-0-3-0-package tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package
550 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package /Users/witchfinderx/.npm/86d93852-nt-contrib-connect-0-3-0-package.lock
551 silly lockFile c85950db-ontrib-connect-0-3-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz
552 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz /Users/witchfinderx/.npm/c85950db-ontrib-connect-0-3-0-package-tgz.lock
553 silly gunzTarPerm modes [ '755', '644' ]
554 silly gunzTarPerm extractEntry package.json
555 silly gunzTarPerm extractEntry Gruntfile.js
556 silly gunzTarPerm extractEntry .travis.yml
557 silly gunzTarPerm extractEntry AUTHORS
558 silly gunzTarPerm extractEntry CHANGELOG
559 silly gunzTarPerm extractEntry CONTRIBUTING.md
560 silly gunzTarPerm extractEntry LICENSE-MIT
561 silly gunzTarPerm extractEntry tasks/connect.js
562 silly lockFile 86d93852-nt-contrib-connect-0-3-0-package tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package
563 silly lockFile 86d93852-nt-contrib-connect-0-3-0-package tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package
564 silly lockFile c85950db-ontrib-connect-0-3-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz
565 silly lockFile c85950db-ontrib-connect-0-3-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz
566 verbose chmod /Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz 644
567 verbose chown /Users/witchfinderx/.npm/grunt-contrib-connect/0.3.0/package.tgz [ 501, 20 ]
568 silly lockFile 16cb4eb4--grunt-contrib-connect-0-3-0-tgz https://registry.npmjs.org/grunt-contrib-connect/-/grunt-contrib-connect-0.3.0.tgz
569 silly lockFile 16cb4eb4--grunt-contrib-connect-0-3-0-tgz https://registry.npmjs.org/grunt-contrib-connect/-/grunt-contrib-connect-0.3.0.tgz
570 silly lockFile 206c5a79-grunt-contrib-connect-0-3-0 grunt-contrib-connect@0.3.0
571 silly lockFile 206c5a79-grunt-contrib-connect-0-3-0 grunt-contrib-connect@0.3.0
572 silly lockFile ec92e4f7-grunt-contrib-connect-0-3-0 grunt-contrib-connect@~0.3.0
573 silly lockFile ec92e4f7-grunt-contrib-connect-0-3-0 grunt-contrib-connect@~0.3.0
574 http 200 https://registry.npmjs.org/grunt-contrib-watch
575 silly registry.get cb [ 200,
575 silly registry.get   { vary: 'Accept',
575 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
575 silly registry.get     etag: '"C9G2A6DJPJRUYBELVL0Y4E595"',
575 silly registry.get     date: 'Sun, 03 Nov 2013 19:02:37 GMT',
575 silly registry.get     'content-type': 'application/json',
575 silly registry.get     'content-length': '241411' } ]
576 silly addNameRange number 2 { name: 'grunt-contrib-watch',
576 silly addNameRange   range: '>=0.2.0-0 <0.3.0-0',
576 silly addNameRange   hasData: true }
577 silly addNameRange versions [ 'grunt-contrib-watch',
577 silly addNameRange   [ '0.1.0',
577 silly addNameRange     '0.1.1',
577 silly addNameRange     '0.1.2',
577 silly addNameRange     '0.1.3',
577 silly addNameRange     '0.1.4',
577 silly addNameRange     '0.2.0',
577 silly addNameRange     '0.3.0',
577 silly addNameRange     '0.3.1',
577 silly addNameRange     '0.4.0',
577 silly addNameRange     '0.4.1',
577 silly addNameRange     '0.4.2',
577 silly addNameRange     '0.4.3',
577 silly addNameRange     '0.4.4',
577 silly addNameRange     '0.5.0',
577 silly addNameRange     '0.5.1',
577 silly addNameRange     '0.5.2',
577 silly addNameRange     '0.5.3',
577 silly addNameRange     '0.2.0-a',
577 silly addNameRange     '0.2.0-rc5',
577 silly addNameRange     '0.2.0-rc7' ] ]
578 verbose addNamed [ 'grunt-contrib-watch', '0.2.0' ]
579 verbose addNamed [ '0.2.0', '0.2.0' ]
580 silly lockFile af3b6aeb-grunt-contrib-watch-0-2-0 grunt-contrib-watch@0.2.0
581 verbose lock grunt-contrib-watch@0.2.0 /Users/witchfinderx/.npm/af3b6aeb-grunt-contrib-watch-0-2-0.lock
582 silly lockFile 489bb2bf-ch-grunt-contrib-watch-0-2-0-tgz https://registry.npmjs.org/grunt-contrib-watch/-/grunt-contrib-watch-0.2.0.tgz
583 verbose lock https://registry.npmjs.org/grunt-contrib-watch/-/grunt-contrib-watch-0.2.0.tgz /Users/witchfinderx/.npm/489bb2bf-ch-grunt-contrib-watch-0-2-0-tgz.lock
584 verbose addRemoteTarball [ 'https://registry.npmjs.org/grunt-contrib-watch/-/grunt-contrib-watch-0.2.0.tgz',
584 verbose addRemoteTarball   '048d92f4b652e97c3f65a9096df04208d1cabb7b' ]
585 info retry fetch attempt 1 at 22:03:37
586 verbose fetch to= /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/tmp.tgz
587 http GET https://registry.npmjs.org/grunt-contrib-watch/-/grunt-contrib-watch-0.2.0.tgz
588 http 200 https://registry.npmjs.org/grunt-contrib-watch/-/grunt-contrib-watch-0.2.0.tgz
589 verbose tar unpack /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/tmp.tgz
590 silly lockFile 1aabe745-185-0-032060215482488275-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package
591 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package /Users/witchfinderx/.npm/1aabe745-185-0-032060215482488275-package.lock
592 silly lockFile 9bb13222-185-0-032060215482488275-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/tmp.tgz
593 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/tmp.tgz /Users/witchfinderx/.npm/9bb13222-185-0-032060215482488275-tmp-tgz.lock
594 silly gunzTarPerm modes [ '755', '644' ]
595 silly gunzTarPerm extractEntry package.json
596 silly gunzTarPerm extractEntry .npmignore
597 silly gunzTarPerm extractEntry README.md
598 silly gunzTarPerm extractEntry Gruntfile.js
599 silly gunzTarPerm extractEntry CONTRIBUTING.md
600 silly gunzTarPerm extractEntry AUTHORS
601 silly gunzTarPerm extractEntry CHANGELOG
602 silly gunzTarPerm extractEntry .gitattributes
603 silly gunzTarPerm extractEntry docs/watch-examples.md
604 silly gunzTarPerm extractEntry docs/watch-options.md
605 silly gunzTarPerm extractEntry .jshintrc
606 silly gunzTarPerm extractEntry LICENSE-MIT
607 silly gunzTarPerm extractEntry .editorconfig
608 silly gunzTarPerm extractEntry .travis.yml
609 silly gunzTarPerm extractEntry tasks/watch.js
610 silly gunzTarPerm extractEntry test/fixtures/multiTargets/Gruntfile.js
611 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/fail.js
612 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/interrupt.js
613 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/one.js
614 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/two.js
615 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/wait.js
616 silly gunzTarPerm extractEntry test/fixtures/oneTarget/Gruntfile.js
617 silly gunzTarPerm extractEntry test/fixtures/oneTarget/lib/one.js
618 silly gunzTarPerm extractEntry test/fixtures/tasks/echo.js
619 silly gunzTarPerm extractEntry test/tasks/helper.js
620 silly gunzTarPerm extractEntry test/tasks/watch_test.js
621 silly lockFile 1aabe745-185-0-032060215482488275-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package
622 silly lockFile 1aabe745-185-0-032060215482488275-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package
623 silly lockFile 9bb13222-185-0-032060215482488275-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/tmp.tgz
624 silly lockFile 9bb13222-185-0-032060215482488275-tmp-tgz tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/tmp.tgz
625 verbose tar pack [ '/Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz',
625 verbose tar pack   '/var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package' ]
626 verbose tarball /Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz
627 verbose folder /var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package
628 silly lockFile 1aabe745-185-0-032060215482488275-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package
629 verbose lock tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package /Users/witchfinderx/.npm/1aabe745-185-0-032060215482488275-package.lock
630 silly lockFile 215c9adc--contrib-watch-0-2-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz
631 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz /Users/witchfinderx/.npm/215c9adc--contrib-watch-0-2-0-package-tgz.lock
632 silly lockFile 1aabe745-185-0-032060215482488275-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package
633 silly lockFile 1aabe745-185-0-032060215482488275-package tar:///var/folders/_t/1vqcskn95gs86941qv5vqvcm0000gn/T/npm-559-10MoRo1i/1383505417185-0.032060215482488275/package
634 silly lockFile 215c9adc--contrib-watch-0-2-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz
635 silly lockFile 215c9adc--contrib-watch-0-2-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz
636 silly lockFile 6992fcd0-runt-contrib-watch-0-2-0-package /Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package
637 verbose lock /Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package /Users/witchfinderx/.npm/6992fcd0-runt-contrib-watch-0-2-0-package.lock
638 silly lockFile 6992fcd0-runt-contrib-watch-0-2-0-package /Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package
639 silly lockFile 6992fcd0-runt-contrib-watch-0-2-0-package /Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package
640 verbose tar unpack /Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz
641 silly lockFile d5d890aa-runt-contrib-watch-0-2-0-package tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package
642 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package /Users/witchfinderx/.npm/d5d890aa-runt-contrib-watch-0-2-0-package.lock
643 silly lockFile 215c9adc--contrib-watch-0-2-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz
644 verbose lock tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz /Users/witchfinderx/.npm/215c9adc--contrib-watch-0-2-0-package-tgz.lock
645 silly gunzTarPerm modes [ '755', '644' ]
646 silly gunzTarPerm extractEntry package.json
647 silly gunzTarPerm extractEntry .npmignore
648 silly gunzTarPerm extractEntry README.md
649 silly gunzTarPerm extractEntry Gruntfile.js
650 silly gunzTarPerm extractEntry CONTRIBUTING.md
651 silly gunzTarPerm extractEntry AUTHORS
652 silly gunzTarPerm extractEntry CHANGELOG
653 silly gunzTarPerm extractEntry .gitattributes
654 silly gunzTarPerm extractEntry .jshintrc
655 silly gunzTarPerm extractEntry LICENSE-MIT
656 silly gunzTarPerm extractEntry .editorconfig
657 silly gunzTarPerm extractEntry docs/watch-examples.md
658 silly gunzTarPerm extractEntry docs/watch-options.md
659 silly gunzTarPerm extractEntry .travis.yml
660 silly gunzTarPerm extractEntry tasks/watch.js
661 silly gunzTarPerm extractEntry test/fixtures/multiTargets/Gruntfile.js
662 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/fail.js
663 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/interrupt.js
664 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/one.js
665 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/two.js
666 silly gunzTarPerm extractEntry test/fixtures/multiTargets/lib/wait.js
667 silly gunzTarPerm extractEntry test/fixtures/oneTarget/Gruntfile.js
668 silly gunzTarPerm extractEntry test/fixtures/oneTarget/lib/one.js
669 silly gunzTarPerm extractEntry test/fixtures/tasks/echo.js
670 silly gunzTarPerm extractEntry test/tasks/helper.js
671 silly gunzTarPerm extractEntry test/tasks/watch_test.js
672 silly lockFile d5d890aa-runt-contrib-watch-0-2-0-package tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package
673 silly lockFile d5d890aa-runt-contrib-watch-0-2-0-package tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package
674 silly lockFile 215c9adc--contrib-watch-0-2-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz
675 silly lockFile 215c9adc--contrib-watch-0-2-0-package-tgz tar:///Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz
676 verbose chmod /Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz 644
677 verbose chown /Users/witchfinderx/.npm/grunt-contrib-watch/0.2.0/package.tgz [ 501, 20 ]
678 silly lockFile 489bb2bf-ch-grunt-contrib-watch-0-2-0-tgz https://registry.npmjs.org/grunt-contrib-watch/-/grunt-contrib-watch-0.2.0.tgz
679 silly lockFile 489bb2bf-ch-grunt-contrib-watch-0-2-0-tgz https://registry.npmjs.org/grunt-contrib-watch/-/grunt-contrib-watch-0.2.0.tgz
680 silly lockFile af3b6aeb-grunt-contrib-watch-0-2-0 grunt-contrib-watch@0.2.0
681 silly lockFile af3b6aeb-grunt-contrib-watch-0-2-0 grunt-contrib-watch@0.2.0
682 silly lockFile 70960ff2-grunt-contrib-watch-0-2-0 grunt-contrib-watch@~0.2.0
683 silly lockFile 70960ff2-grunt-contrib-watch-0-2-0 grunt-contrib-watch@~0.2.0
684 http 200 https://registry.npmjs.org/grunt-contrib-qunit
685 verbose bad json {"_id":"grunt-contrib-qunit","_rev":"26-b2d9ad64042d69c07c97e9a44e6232e2","name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","dist-tags":{"latest":"0.3.0"},"versions":{"0.1.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.0","grunt-contrib-internal":"*","grunt":"~0.4.0rc2","grunt-cli":"~0.1.1"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is converted to the appropriate `file://` URI. Finally, each URI is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from `file://` URIs is inadequate, you can specify `http://` or `https://` URIs instead. If `http://` or `https://` URIs have been specified, those URIs will be passed directly to [PhantomJS][], as-specified.\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  }\n});\n```\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URIs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URIs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Dec 10 2012 16:42:20.*\n","_id":"grunt-contrib-qunit@0.1.0","dist":{"shasum":"c0bbb6bf4b35921457a496a610c936a1044e868c","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.0.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"}],"directories":{}},"0.1.1":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-02-14   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Feb 18 2013 08:59:00.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.1.1","dist":{"shasum":"205a2f4a402273dbba5cda2ce5f22acdd91b9b75","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.2.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.2.0"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-02-27   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-14   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Thu Feb 28 2013 11:58:59.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.0","dist":{"shasum":"1928b270206be9818b827e851ede7ed365fe524c","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.0.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.2.1":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.1","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.3.0"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ],\n      },\n    },\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.',\n      },\n    },\n  },\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Fri Apr 05 2013 19:55:03.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.1","dist":{"shasum":"d82be1605143de3461dd529d2d4c437ae416c506","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"}],"directories":{}},"0.2.2":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.2","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.3.0"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-connect":"~0.3.0","grunt-contrib-internal":"~0.4.5","grunt":"~0.4.1","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ]\n      }\n    }\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-06-06   v0.2.2   Warn if no assertions ran in a single test. Spaces instead of newlines for clickable urls. Wrap bridge.js in a IIFE.\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Thu Jun 06 2013 22:11:10.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.2","dist":{"shasum":"8fbcea05f24b9d756b983e409d5b4c32be7f1f08","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"shama","email":"kyle@dontkry.com"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"}],"directories":{}},"0.3.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.3.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.4.0"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-connect":"~0.3.0","grunt-contrib-internal":"~0.4.5","grunt":"~0.4.1","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit v0.3.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n#### OS Dependencies\nThis plugin uses PhantomJS to run tests. PhantomJS requires these dependencies\n\n**On Ubuntu/Debian**\n\n`apt-get install libfontconfig1 fontconfig libfontconfig1-dev libfreetype6-dev`\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### force\nType: `boolean`  \nDefault: `false`\n\nWhen true, the whole task will not fail when there are individual test failures, or when no assertions for a test have run. This can be set to true when you always want other tasks in the queue to be executed.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ]\n      }\n    }\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events, with arguments, are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart` `(name)`\n* `qunit.testStart` `(name)`\n* `qunit.log` `(result, actual, expected, message, source)`\n* `qunit.testDone` `(name, failed, passed, total)`\n* `qunit.moduleDone` `(name, failed, passed, total)`\n* `qunit.done` `(failed, passed, total, runtime)`\n\nIn addition to QUnit callback-named events, the following events are emitted by Grunt:\n\n* `qunit.spawn` `(url)`: when [PhantomJS][] is spawned for a test\n* `qunit.fail.load` `(url)`: when [PhantomJS][] could not open the given url\n* `qunit.fail.timeout`: when a QUnit test times out, usually due to a missing `QUnit.start()` call\n* `qunit.error.onError` `(message, stackTrace)`\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-09-29   v0.3.0   Update grunt-lib-phantomjs to v0.4.0. Add qunit.fail.load and qunit.fail.timeout events. Update QUnit to v1.12.0. Add force option. Propagate onError events from phantomjs through the qunit.error.onError event. Remove confusing error message.\n * 2013-06-06   v0.2.2   Warn if no assertions ran in a single test. Spaces instead of newlines for clickable urls. Wrap bridge.js in a IIFE.\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Sun Sep 29 2013 11:09:57.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.3.0","dist":{"shasum":"df1cb21a6b2c6750e81b3b8c73029d45313e43f8","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"shama","email":"kyle@dontkry.com"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"jzaefferer","email":"joern.zaefferer@gmail.com"}],"directories":{}},"0.1.1-rc5":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1-rc5","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-connect":"~0.1.0","grunt-contrib-internal":"*","grunt":"~0.4.0rc5","difflet":"~0.2.3"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Wed Jan 09 2013 14:12:29.*\n","_id":"grunt-contrib-qunit@0.1.1-rc5","dist":{"shasum":"b9b322052eba7b6b7e64ee3595583b39139f58b6","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1rc5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}},"0.1.1-rc6":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1-rc6","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-connect":"0.1.1rc6","grunt-contrib-internal":"*","grunt":"0.4.0rc6","difflet":"~0.2.3"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Fri Jan 18 2013 10:16:16.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.1.1-rc6","dist":{"shasum":"0b1ec3e8bad1d1543c3345c9654dbf750320fb47","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1rc6.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}}},"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is converted to the appropriate `file://` URI. Finally, each URI is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from `file://` URIs is inadequate, you can specify `http://` or `https://` URIs instead. If `http://` or `https://` URIs have been specified, those URIs will be passed directly to [PhantomJS][], as-specified.\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  }\n});\n```\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URIs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URIs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Dec 10 2012 16:42:20.*\n","maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"jzaefferer","email":"joern.zaefferer@gmail.com"}],"time":{"0.1.0":"2012-12-10T21:49:58.333Z","0.1.1":"2013-02-18T17:26:12.289Z","0.2.0":"201
686 error registry error parsing json
687 silly registry.get cb [ 200,
687 silly registry.get   { vary: 'Accept',
687 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
687 silly registry.get     etag: '"1EPFZH9IPCY0OFQNUPT4UM0S0"',
687 silly registry.get     date: 'Sun, 03 Nov 2013 19:02:38 GMT',
687 silly registry.get     'content-type': 'application/json',
687 silly registry.get     'content-length': '81737' } ]
688 silly lockFile 168fe00e-grunt-contrib-qunit-0-1-1 grunt-contrib-qunit@~0.1.1
689 silly lockFile 168fe00e-grunt-contrib-qunit-0-1-1 grunt-contrib-qunit@~0.1.1
690 error SyntaxError: Unexpected end of input
690 error {"_id":"grunt-contrib-qunit","_rev":"26-b2d9ad64042d69c07c97e9a44e6232e2","name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","dist-tags":{"latest":"0.3.0"},"versions":{"0.1.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.0","grunt-contrib-internal":"*","grunt":"~0.4.0rc2","grunt-cli":"~0.1.1"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is converted to the appropriate `file://` URI. Finally, each URI is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from `file://` URIs is inadequate, you can specify `http://` or `https://` URIs instead. If `http://` or `https://` URIs have been specified, those URIs will be passed directly to [PhantomJS][], as-specified.\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  }\n});\n```\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URIs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URIs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Dec 10 2012 16:42:20.*\n","_id":"grunt-contrib-qunit@0.1.0","dist":{"shasum":"c0bbb6bf4b35921457a496a610c936a1044e868c","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.0.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"}],"directories":{}},"0.1.1":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-02-14   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Feb 18 2013 08:59:00.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.1.1","dist":{"shasum":"205a2f4a402273dbba5cda2ce5f22acdd91b9b75","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.2.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.2.0"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-02-27   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-14   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Thu Feb 28 2013 11:58:59.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.0","dist":{"shasum":"1928b270206be9818b827e851ede7ed365fe524c","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.0.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.2.1":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.1","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.3.0"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ],\n      },\n    },\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.',\n      },\n    },\n  },\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Fri Apr 05 2013 19:55:03.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.1","dist":{"shasum":"d82be1605143de3461dd529d2d4c437ae416c506","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"}],"directories":{}},"0.2.2":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.2","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.3.0"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-connect":"~0.3.0","grunt-contrib-internal":"~0.4.5","grunt":"~0.4.1","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ]\n      }\n    }\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-06-06   v0.2.2   Warn if no assertions ran in a single test. Spaces instead of newlines for clickable urls. Wrap bridge.js in a IIFE.\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Thu Jun 06 2013 22:11:10.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.2","dist":{"shasum":"8fbcea05f24b9d756b983e409d5b4c32be7f1f08","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"shama","email":"kyle@dontkry.com"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"}],"directories":{}},"0.3.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.3.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.4.0"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-connect":"~0.3.0","grunt-contrib-internal":"~0.4.5","grunt":"~0.4.1","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit v0.3.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n#### OS Dependencies\nThis plugin uses PhantomJS to run tests. PhantomJS requires these dependencies\n\n**On Ubuntu/Debian**\n\n`apt-get install libfontconfig1 fontconfig libfontconfig1-dev libfreetype6-dev`\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### force\nType: `boolean`  \nDefault: `false`\n\nWhen true, the whole task will not fail when there are individual test failures, or when no assertions for a test have run. This can be set to true when you always want other tasks in the queue to be executed.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ]\n      }\n    }\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events, with arguments, are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart` `(name)`\n* `qunit.testStart` `(name)`\n* `qunit.log` `(result, actual, expected, message, source)`\n* `qunit.testDone` `(name, failed, passed, total)`\n* `qunit.moduleDone` `(name, failed, passed, total)`\n* `qunit.done` `(failed, passed, total, runtime)`\n\nIn addition to QUnit callback-named events, the following events are emitted by Grunt:\n\n* `qunit.spawn` `(url)`: when [PhantomJS][] is spawned for a test\n* `qunit.fail.load` `(url)`: when [PhantomJS][] could not open the given url\n* `qunit.fail.timeout`: when a QUnit test times out, usually due to a missing `QUnit.start()` call\n* `qunit.error.onError` `(message, stackTrace)`\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-09-29   v0.3.0   Update grunt-lib-phantomjs to v0.4.0. Add qunit.fail.load and qunit.fail.timeout events. Update QUnit to v1.12.0. Add force option. Propagate onError events from phantomjs through the qunit.error.onError event. Remove confusing error message.\n * 2013-06-06   v0.2.2   Warn if no assertions ran in a single test. Spaces instead of newlines for clickable urls. Wrap bridge.js in a IIFE.\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Sun Sep 29 2013 11:09:57.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.3.0","dist":{"shasum":"df1cb21a6b2c6750e81b3b8c73029d45313e43f8","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"shama","email":"kyle@dontkry.com"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"jzaefferer","email":"joern.zaefferer@gmail.com"}],"directories":{}},"0.1.1-rc5":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1-rc5","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-connect":"~0.1.0","grunt-contrib-internal":"*","grunt":"~0.4.0rc5","difflet":"~0.2.3"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Wed Jan 09 2013 14:12:29.*\n","_id":"grunt-contrib-qunit@0.1.1-rc5","dist":{"shasum":"b9b322052eba7b6b7e64ee3595583b39139f58b6","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1rc5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}},"0.1.1-rc6":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1-rc6","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-connect":"0.1.1rc6","grunt-contrib-internal":"*","grunt":"0.4.0rc6","difflet":"~0.2.3"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Fri Jan 18 2013 10:16:16.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.1.1-rc6","dist":{"shasum":"0b1ec3e8bad1d1543c3345c9654dbf750320fb47","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1rc6.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}}},"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is converted to the appropriate `file://` URI. Finally, each URI is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from `file://` URIs is inadequate, you can specify `http://` or `https://` URIs instead. If `http://` or `https://` URIs have been specified, those URIs will be passed directly to [PhantomJS][], as-specified.\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  }\n});\n```\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URIs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URIs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Dec 10 2012 16:42:20.*\n","maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"jzaefferer","email":"joern.zaefferer@gmail.com"}],"time":{"0.1.0":"2012-12-10T21:49:58.333Z","0.1.1":"2013-02-18T17:26:12.289Z","0.2.0":"201
690 error     at Object.parse (native)
690 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:23)
690 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/index.js:148:22)
690 error     at Request.EventEmitter.emit (events.js:98:17)
690 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/index.js:876:14)
690 error     at Request.EventEmitter.emit (events.js:117:20)
690 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/index.js:827:12)
690 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
690 error     at _stream_readable.js:910:16
690 error     at process._tickCallback (node.js:415:13)
691 error If you need help, you may report this log at:
691 error     <http://github.com/isaacs/npm/issues>
691 error or email it to:
691 error     <npm-@googlegroups.com>
692 error System Darwin 13.0.0
693 error command "node" "/usr/local/bin/npm" "install"
694 error cwd /Users/witchfinderx/Sites/scalable-maintainable-js-training/1
695 error node -v v0.10.15
696 error npm -v 1.3.5
697 error type unexpected_eos
698 verbose exit [ 1, true ]
